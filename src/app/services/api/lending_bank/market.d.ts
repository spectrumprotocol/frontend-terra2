/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Represents the type of an fungible asset
 *
 * Each **asset info** instance can be one of two variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_Addr =
  | {
      native: string;
    }
  | {
      cw20: Addr;
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
export type InterestRateModel = {
  linear: {
    params: LinearInterestRateModelParams;
    [k: string]: unknown;
  };
};

/**
 * Asset markets
 */
export interface Market {
  /**
   * If false cannot do any action (deposit/withdraw/borrow/repay/liquidate)
   */
  active: boolean;
  /**
   * Indicated whether the asset is native or a cw20 token
   */
  asset_info: AssetInfoBaseFor_Addr;
  /**
   * If false cannot borrow
   */
  borrow_enabled: boolean;
  /**
   * Borrow index (Used to compute borrow interest)
   */
  borrow_index: Decimal;
  /**
   * Rate charged to borrowers
   */
  borrow_rate: Decimal;
  /**
   * Total debt scaled for the market's currency
   */
  debt_total_scaled: Uint128;
  /**
   * If false cannot deposit
   */
  deposit_enabled: boolean;
  /**
   * ibToken contract address
   */
  ib_token_address: Addr;
  /**
   * Market index (Bit position on data)
   */
  index: number;
  /**
   * Timestamp (seconds) where indexes and where last updated
   */
  indexes_last_updated: number;
  /**
   * model (params + internal state) that defines how interest rate behaves
   */
  interest_rate_model: InterestRateModel;
  /**
   * Liquidity index (Used to compute deposit interest)
   */
  liquidity_index: Decimal;
  /**
   * Rate paid to depositors
   */
  liquidity_rate: Decimal;
  /**
   * Portion of the borrow rate that is kept as protocol rewards
   */
  reserve_factor: Decimal;
  [k: string]: unknown;
}
/**
 * Linear interest rate model
 */
export interface LinearInterestRateModelParams {
  /**
   * Base rate
   */
  base: Decimal;
  /**
   * Optimal utilization rate 1
   */
  optimal_utilization_rate_1: Decimal;
  /**
   * Optimal utilization rate 2
   */
  optimal_utilization_rate_2: Decimal;
  /**
   * Slope parameter for interest rate model function when utilization_rate <= optimal_utilization_rate
   */
  slope_1: Decimal;
  /**
   * Slope parameter for interest rate model function when optimal_utilization_rate < utilization_rate <= maximum_utilization_rate
   */
  slope_2: Decimal;
  /**
   * Slope parameter for interest rate model function when utilization_rate > maximum_utilization_rate
   */
  slope_3: Decimal;
  [k: string]: unknown;
}
