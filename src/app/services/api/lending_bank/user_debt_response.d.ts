/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Represents the type of an fungible asset
 *
 * Each **asset info** instance can be one of two variants:
 *
 * - Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.
 */
export type AssetInfoBaseFor_String =
  | {
      native: string;
    }
  | {
      cw20: string;
    };

export interface UserDebtResponse {
  debts: UserAssetDebtResponse[];
  [k: string]: unknown;
}
export interface UserAssetDebtResponse {
  /**
   * Underlying asset amount that is actually owed at the current block
   */
  amount: Uint128;
  /**
   * Scaled debt amount stored in contract state
   */
  amount_scaled: Uint128;
  /**
   * Asset info
   */
  asset_info: AssetInfoBaseFor_String;
  /**
   * Either denom if native asset or contract address if cw20
   */
  asset_label: string;
  /**
   * Bytes used as key on the kv store for data related to the asset
   */
  asset_reference: number[];
  /**
   * Asset symbol
   */
  symbol: string;
  [k: string]: unknown;
}
